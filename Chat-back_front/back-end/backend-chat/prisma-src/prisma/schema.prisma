// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Result {
  WIN
  LOSS
  UNPROCESSED
}

enum EventType {
  BALL_HIT
  SCORE
  UNPROCESSED
}
model User {
  id                  String  @id @default(uuid())
  username            String  @unique
  email               String  @unique
  password_hashed     String  
  display_name        String  
  avatar_url          String
  two_factor_auth     String
  two_factor_secret_key String
  rank                String 
  friend            Friend[] @relation("UserToFriend")
  friends           Friend[] @relation("Friend")
  notification        Notification[]
  chat_channel        Chat_channel[]
  chat_message        Chat_message[]
  player1             Pong_match[] @relation("player1")
  player2             Pong_match[] @relation("player2")
  matchUser           match_history[]  @relation("matchUser")
  matchOpponent       match_history[]  @relation("matchOpponent")
  matchEvent          match_events[]
}

model Friend {
  id          String   @id @default(uuid())
  user_id     String   
  friend_id   String   
  status      Status   @default(PENDING)
  created_at  DateTime
  user        User     @relation("UserToFriend", fields: [user_id], references: [id])
  friends     User     @relation("Friend", fields: [friend_id], references: [id])
}

model Notification{
  id                   String @id @default(uuid())
  user_id              String
  content              String
  user User @relation(fields: [user_id], references: [id])
}

model Chat_channel{
  id String @id @default(uuid())
  owner_id String
  channel_name String
  is_private Boolean
  password_hash String?
  created_at DateTime
  user  User @relation(fields: [owner_id], references: [id])
  messages      Chat_message[]
}

model Chat_message{
  id String @id @default(uuid())
  channel_id String
  user_id String
  timestamp DateTime
  messages_content String
  user  User @relation(fields: [user_id], references: [id])
  chatChannel Chat_channel @relation(fields: [channel_id], references: [id])
}

model Pong_match{
  id String @id @default(uuid())
  player1_id String
  player2_id String
  created_at DateTime
  updated_at DateTime
  playerOne  User @relation("player1", fields: [player1_id], references: [id])
  playerTwo  User @relation("player2", fields: [player2_id], references: [id])
  matchEvents match_events[]
}

model match_history{
  id String @id @default(uuid())
  user_id String
  opponent_id String
  result Result @default(UNPROCESSED)
  user_score Int
  opponent_score Int
  timestamp DateTime
  user  User @relation("matchUser", fields: [user_id], references: [id])
  opponent  User @relation("matchOpponent", fields: [opponent_id], references: [id])
}

model match_events{
  id String @id @default(uuid())
  match_id String
  player_id String
  event_type EventType @default(UNPROCESSED)
  timestamp DateTime
  match Pong_match @relation(fields: [match_id], references: [id])
  user User @relation(fields: [player_id], references: [id])
}